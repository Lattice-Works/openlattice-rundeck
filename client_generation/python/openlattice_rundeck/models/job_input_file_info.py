# coding: utf-8

"""
    Rundeck

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openlattice_rundeck.configuration import Configuration


class JobInputFileInfo(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'str',
        'user': 'str',
        'file_state': 'str',
        'sha': 'str',
        'job_id': 'str',
        'date_created': 'str',
        'server_node_uuid': 'str',
        'file_name': 'str',
        'size': 'int',
        'expiration_date': 'str',
        'exec_id': 'str'
    }

    attribute_map = {
        'id': 'id',
        'user': 'user',
        'file_state': 'fileState',
        'sha': 'sha',
        'job_id': 'jobId',
        'date_created': 'dateCreated',
        'server_node_uuid': 'serverNodeUUID',
        'file_name': 'fileName',
        'size': 'size',
        'expiration_date': 'expirationDate',
        'exec_id': 'execId'
    }

    def __init__(self, id=None, user=None, file_state=None, sha=None, job_id=None, date_created=None, server_node_uuid=None, file_name=None, size=None, expiration_date=None, exec_id=None, local_vars_configuration=None):  # noqa: E501
        """JobInputFileInfo - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._user = None
        self._file_state = None
        self._sha = None
        self._job_id = None
        self._date_created = None
        self._server_node_uuid = None
        self._file_name = None
        self._size = None
        self._expiration_date = None
        self._exec_id = None
        self.discriminator = None

        self.id = id
        self.user = user
        self.file_state = file_state
        self.sha = sha
        self.job_id = job_id
        self.date_created = date_created
        self.server_node_uuid = server_node_uuid
        self.file_name = file_name
        if size is not None:
            self.size = size
        self.expiration_date = expiration_date
        if exec_id is not None:
            self.exec_id = exec_id

    @property
    def id(self):
        """Gets the id of this JobInputFileInfo.  # noqa: E501


        :return: The id of this JobInputFileInfo.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this JobInputFileInfo.


        :param id: The id of this JobInputFileInfo.  # noqa: E501
        :type id: str
        """
        if self.local_vars_configuration.client_side_validation and id is None:  # noqa: E501
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def user(self):
        """Gets the user of this JobInputFileInfo.  # noqa: E501


        :return: The user of this JobInputFileInfo.  # noqa: E501
        :rtype: str
        """
        return self._user

    @user.setter
    def user(self, user):
        """Sets the user of this JobInputFileInfo.


        :param user: The user of this JobInputFileInfo.  # noqa: E501
        :type user: str
        """
        if self.local_vars_configuration.client_side_validation and user is None:  # noqa: E501
            raise ValueError("Invalid value for `user`, must not be `None`")  # noqa: E501

        self._user = user

    @property
    def file_state(self):
        """Gets the file_state of this JobInputFileInfo.  # noqa: E501


        :return: The file_state of this JobInputFileInfo.  # noqa: E501
        :rtype: str
        """
        return self._file_state

    @file_state.setter
    def file_state(self, file_state):
        """Sets the file_state of this JobInputFileInfo.


        :param file_state: The file_state of this JobInputFileInfo.  # noqa: E501
        :type file_state: str
        """
        if self.local_vars_configuration.client_side_validation and file_state is None:  # noqa: E501
            raise ValueError("Invalid value for `file_state`, must not be `None`")  # noqa: E501
        allowed_values = ["temp", "deleted", "expired", "retained"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and file_state not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `file_state` ({0}), must be one of {1}"  # noqa: E501
                .format(file_state, allowed_values)
            )

        self._file_state = file_state

    @property
    def sha(self):
        """Gets the sha of this JobInputFileInfo.  # noqa: E501


        :return: The sha of this JobInputFileInfo.  # noqa: E501
        :rtype: str
        """
        return self._sha

    @sha.setter
    def sha(self, sha):
        """Sets the sha of this JobInputFileInfo.


        :param sha: The sha of this JobInputFileInfo.  # noqa: E501
        :type sha: str
        """
        if self.local_vars_configuration.client_side_validation and sha is None:  # noqa: E501
            raise ValueError("Invalid value for `sha`, must not be `None`")  # noqa: E501

        self._sha = sha

    @property
    def job_id(self):
        """Gets the job_id of this JobInputFileInfo.  # noqa: E501


        :return: The job_id of this JobInputFileInfo.  # noqa: E501
        :rtype: str
        """
        return self._job_id

    @job_id.setter
    def job_id(self, job_id):
        """Sets the job_id of this JobInputFileInfo.


        :param job_id: The job_id of this JobInputFileInfo.  # noqa: E501
        :type job_id: str
        """
        if self.local_vars_configuration.client_side_validation and job_id is None:  # noqa: E501
            raise ValueError("Invalid value for `job_id`, must not be `None`")  # noqa: E501

        self._job_id = job_id

    @property
    def date_created(self):
        """Gets the date_created of this JobInputFileInfo.  # noqa: E501


        :return: The date_created of this JobInputFileInfo.  # noqa: E501
        :rtype: str
        """
        return self._date_created

    @date_created.setter
    def date_created(self, date_created):
        """Sets the date_created of this JobInputFileInfo.


        :param date_created: The date_created of this JobInputFileInfo.  # noqa: E501
        :type date_created: str
        """
        if self.local_vars_configuration.client_side_validation and date_created is None:  # noqa: E501
            raise ValueError("Invalid value for `date_created`, must not be `None`")  # noqa: E501

        self._date_created = date_created

    @property
    def server_node_uuid(self):
        """Gets the server_node_uuid of this JobInputFileInfo.  # noqa: E501


        :return: The server_node_uuid of this JobInputFileInfo.  # noqa: E501
        :rtype: str
        """
        return self._server_node_uuid

    @server_node_uuid.setter
    def server_node_uuid(self, server_node_uuid):
        """Sets the server_node_uuid of this JobInputFileInfo.


        :param server_node_uuid: The server_node_uuid of this JobInputFileInfo.  # noqa: E501
        :type server_node_uuid: str
        """
        if self.local_vars_configuration.client_side_validation and server_node_uuid is None:  # noqa: E501
            raise ValueError("Invalid value for `server_node_uuid`, must not be `None`")  # noqa: E501

        self._server_node_uuid = server_node_uuid

    @property
    def file_name(self):
        """Gets the file_name of this JobInputFileInfo.  # noqa: E501


        :return: The file_name of this JobInputFileInfo.  # noqa: E501
        :rtype: str
        """
        return self._file_name

    @file_name.setter
    def file_name(self, file_name):
        """Sets the file_name of this JobInputFileInfo.


        :param file_name: The file_name of this JobInputFileInfo.  # noqa: E501
        :type file_name: str
        """
        if self.local_vars_configuration.client_side_validation and file_name is None:  # noqa: E501
            raise ValueError("Invalid value for `file_name`, must not be `None`")  # noqa: E501

        self._file_name = file_name

    @property
    def size(self):
        """Gets the size of this JobInputFileInfo.  # noqa: E501


        :return: The size of this JobInputFileInfo.  # noqa: E501
        :rtype: int
        """
        return self._size

    @size.setter
    def size(self, size):
        """Sets the size of this JobInputFileInfo.


        :param size: The size of this JobInputFileInfo.  # noqa: E501
        :type size: int
        """

        self._size = size

    @property
    def expiration_date(self):
        """Gets the expiration_date of this JobInputFileInfo.  # noqa: E501


        :return: The expiration_date of this JobInputFileInfo.  # noqa: E501
        :rtype: str
        """
        return self._expiration_date

    @expiration_date.setter
    def expiration_date(self, expiration_date):
        """Sets the expiration_date of this JobInputFileInfo.


        :param expiration_date: The expiration_date of this JobInputFileInfo.  # noqa: E501
        :type expiration_date: str
        """
        if self.local_vars_configuration.client_side_validation and expiration_date is None:  # noqa: E501
            raise ValueError("Invalid value for `expiration_date`, must not be `None`")  # noqa: E501

        self._expiration_date = expiration_date

    @property
    def exec_id(self):
        """Gets the exec_id of this JobInputFileInfo.  # noqa: E501


        :return: The exec_id of this JobInputFileInfo.  # noqa: E501
        :rtype: str
        """
        return self._exec_id

    @exec_id.setter
    def exec_id(self, exec_id):
        """Sets the exec_id of this JobInputFileInfo.


        :param exec_id: The exec_id of this JobInputFileInfo.  # noqa: E501
        :type exec_id: str
        """

        self._exec_id = exec_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, JobInputFileInfo):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, JobInputFileInfo):
            return True

        return self.to_dict() != other.to_dict()
