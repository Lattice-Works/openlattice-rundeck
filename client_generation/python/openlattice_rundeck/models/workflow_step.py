# coding: utf-8

"""
    Rundeck

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openlattice_rundeck.configuration import Configuration


class WorkflowStep(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'jobref': 'object',
        'job_id': 'str',
        'description': 'str',
        '_exec': 'str',
        'script': 'str',
        'scriptfile': 'str',
        'scripturl': 'str',
        'type': 'str',
        'node_step': 'str',
        'workflow': 'list[WorkflowStep]'
    }

    attribute_map = {
        'jobref': 'jobref',
        'job_id': 'jobId',
        'description': 'description',
        '_exec': 'exec',
        'script': 'script',
        'scriptfile': 'scriptfile',
        'scripturl': 'scripturl',
        'type': 'type',
        'node_step': 'nodeStep',
        'workflow': 'workflow'
    }

    def __init__(self, jobref=None, job_id=None, description=None, _exec=None, script=None, scriptfile=None, scripturl=None, type=None, node_step=None, workflow=None, local_vars_configuration=None):  # noqa: E501
        """WorkflowStep - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._jobref = None
        self._job_id = None
        self._description = None
        self.__exec = None
        self._script = None
        self._scriptfile = None
        self._scripturl = None
        self._type = None
        self._node_step = None
        self._workflow = None
        self.discriminator = None

        if jobref is not None:
            self.jobref = jobref
        if job_id is not None:
            self.job_id = job_id
        if description is not None:
            self.description = description
        if _exec is not None:
            self._exec = _exec
        if script is not None:
            self.script = script
        if scriptfile is not None:
            self.scriptfile = scriptfile
        if scripturl is not None:
            self.scripturl = scripturl
        if type is not None:
            self.type = type
        if node_step is not None:
            self.node_step = node_step
        if workflow is not None:
            self.workflow = workflow

    @property
    def jobref(self):
        """Gets the jobref of this WorkflowStep.  # noqa: E501


        :return: The jobref of this WorkflowStep.  # noqa: E501
        :rtype: object
        """
        return self._jobref

    @jobref.setter
    def jobref(self, jobref):
        """Sets the jobref of this WorkflowStep.


        :param jobref: The jobref of this WorkflowStep.  # noqa: E501
        :type jobref: object
        """

        self._jobref = jobref

    @property
    def job_id(self):
        """Gets the job_id of this WorkflowStep.  # noqa: E501


        :return: The job_id of this WorkflowStep.  # noqa: E501
        :rtype: str
        """
        return self._job_id

    @job_id.setter
    def job_id(self, job_id):
        """Sets the job_id of this WorkflowStep.


        :param job_id: The job_id of this WorkflowStep.  # noqa: E501
        :type job_id: str
        """

        self._job_id = job_id

    @property
    def description(self):
        """Gets the description of this WorkflowStep.  # noqa: E501


        :return: The description of this WorkflowStep.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this WorkflowStep.


        :param description: The description of this WorkflowStep.  # noqa: E501
        :type description: str
        """

        self._description = description

    @property
    def _exec(self):
        """Gets the _exec of this WorkflowStep.  # noqa: E501


        :return: The _exec of this WorkflowStep.  # noqa: E501
        :rtype: str
        """
        return self.__exec

    @_exec.setter
    def _exec(self, _exec):
        """Sets the _exec of this WorkflowStep.


        :param _exec: The _exec of this WorkflowStep.  # noqa: E501
        :type _exec: str
        """

        self.__exec = _exec

    @property
    def script(self):
        """Gets the script of this WorkflowStep.  # noqa: E501


        :return: The script of this WorkflowStep.  # noqa: E501
        :rtype: str
        """
        return self._script

    @script.setter
    def script(self, script):
        """Sets the script of this WorkflowStep.


        :param script: The script of this WorkflowStep.  # noqa: E501
        :type script: str
        """

        self._script = script

    @property
    def scriptfile(self):
        """Gets the scriptfile of this WorkflowStep.  # noqa: E501


        :return: The scriptfile of this WorkflowStep.  # noqa: E501
        :rtype: str
        """
        return self._scriptfile

    @scriptfile.setter
    def scriptfile(self, scriptfile):
        """Sets the scriptfile of this WorkflowStep.


        :param scriptfile: The scriptfile of this WorkflowStep.  # noqa: E501
        :type scriptfile: str
        """

        self._scriptfile = scriptfile

    @property
    def scripturl(self):
        """Gets the scripturl of this WorkflowStep.  # noqa: E501


        :return: The scripturl of this WorkflowStep.  # noqa: E501
        :rtype: str
        """
        return self._scripturl

    @scripturl.setter
    def scripturl(self, scripturl):
        """Sets the scripturl of this WorkflowStep.


        :param scripturl: The scripturl of this WorkflowStep.  # noqa: E501
        :type scripturl: str
        """

        self._scripturl = scripturl

    @property
    def type(self):
        """Gets the type of this WorkflowStep.  # noqa: E501


        :return: The type of this WorkflowStep.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this WorkflowStep.


        :param type: The type of this WorkflowStep.  # noqa: E501
        :type type: str
        """

        self._type = type

    @property
    def node_step(self):
        """Gets the node_step of this WorkflowStep.  # noqa: E501


        :return: The node_step of this WorkflowStep.  # noqa: E501
        :rtype: str
        """
        return self._node_step

    @node_step.setter
    def node_step(self, node_step):
        """Sets the node_step of this WorkflowStep.


        :param node_step: The node_step of this WorkflowStep.  # noqa: E501
        :type node_step: str
        """

        self._node_step = node_step

    @property
    def workflow(self):
        """Gets the workflow of this WorkflowStep.  # noqa: E501


        :return: The workflow of this WorkflowStep.  # noqa: E501
        :rtype: list[WorkflowStep]
        """
        return self._workflow

    @workflow.setter
    def workflow(self, workflow):
        """Sets the workflow of this WorkflowStep.


        :param workflow: The workflow of this WorkflowStep.  # noqa: E501
        :type workflow: list[WorkflowStep]
        """

        self._workflow = workflow

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, WorkflowStep):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, WorkflowStep):
            return True

        return self.to_dict() != other.to_dict()
