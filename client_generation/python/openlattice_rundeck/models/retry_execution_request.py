# coding: utf-8

"""
    Rundeck

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openlattice_rundeck.configuration import Configuration


class RetryExecutionRequest(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'arg_string': 'str',
        'loglevel': 'str',
        'as_user': 'str',
        'options': 'object'
    }

    attribute_map = {
        'arg_string': 'argString',
        'loglevel': 'loglevel',
        'as_user': 'asUser',
        'options': 'options'
    }

    def __init__(self, arg_string=None, loglevel=None, as_user=None, options=None, local_vars_configuration=None):  # noqa: E501
        """RetryExecutionRequest - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._arg_string = None
        self._loglevel = None
        self._as_user = None
        self._options = None
        self.discriminator = None

        if arg_string is not None:
            self.arg_string = arg_string
        if loglevel is not None:
            self.loglevel = loglevel
        if as_user is not None:
            self.as_user = as_user
        if options is not None:
            self.options = options

    @property
    def arg_string(self):
        """Gets the arg_string of this RetryExecutionRequest.  # noqa: E501

        Argument string to pass to the job, of the form `-opt value -opt2 value ...`  # noqa: E501

        :return: The arg_string of this RetryExecutionRequest.  # noqa: E501
        :rtype: str
        """
        return self._arg_string

    @arg_string.setter
    def arg_string(self, arg_string):
        """Sets the arg_string of this RetryExecutionRequest.

        Argument string to pass to the job, of the form `-opt value -opt2 value ...`  # noqa: E501

        :param arg_string: The arg_string of this RetryExecutionRequest.  # noqa: E501
        :type arg_string: str
        """

        self._arg_string = arg_string

    @property
    def loglevel(self):
        """Gets the loglevel of this RetryExecutionRequest.  # noqa: E501

        Loglevel to use  # noqa: E501

        :return: The loglevel of this RetryExecutionRequest.  # noqa: E501
        :rtype: str
        """
        return self._loglevel

    @loglevel.setter
    def loglevel(self, loglevel):
        """Sets the loglevel of this RetryExecutionRequest.

        Loglevel to use  # noqa: E501

        :param loglevel: The loglevel of this RetryExecutionRequest.  # noqa: E501
        :type loglevel: str
        """
        allowed_values = ["DEBUG", "VERBOSE", "INFO", "WARN", "ERROR"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and loglevel not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `loglevel` ({0}), must be one of {1}"  # noqa: E501
                .format(loglevel, allowed_values)
            )

        self._loglevel = loglevel

    @property
    def as_user(self):
        """Gets the as_user of this RetryExecutionRequest.  # noqa: E501

        A username identifying the user who ran the job. Requires `runAs` permission.  # noqa: E501

        :return: The as_user of this RetryExecutionRequest.  # noqa: E501
        :rtype: str
        """
        return self._as_user

    @as_user.setter
    def as_user(self, as_user):
        """Sets the as_user of this RetryExecutionRequest.

        A username identifying the user who ran the job. Requires `runAs` permission.  # noqa: E501

        :param as_user: The as_user of this RetryExecutionRequest.  # noqa: E501
        :type as_user: str
        """

        self._as_user = as_user

    @property
    def options(self):
        """Gets the options of this RetryExecutionRequest.  # noqa: E501

        Option value for option named `OPTNAME`. If specified the `argString` value is ignored (*API v18* or later).  # noqa: E501

        :return: The options of this RetryExecutionRequest.  # noqa: E501
        :rtype: object
        """
        return self._options

    @options.setter
    def options(self, options):
        """Sets the options of this RetryExecutionRequest.

        Option value for option named `OPTNAME`. If specified the `argString` value is ignored (*API v18* or later).  # noqa: E501

        :param options: The options of this RetryExecutionRequest.  # noqa: E501
        :type options: object
        """

        self._options = options

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RetryExecutionRequest):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, RetryExecutionRequest):
            return True

        return self.to_dict() != other.to_dict()
