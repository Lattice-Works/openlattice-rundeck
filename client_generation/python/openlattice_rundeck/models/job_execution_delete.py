# coding: utf-8

"""
    Rundeck

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openlattice_rundeck.configuration import Configuration


class JobExecutionDelete(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'failed_count': 'float',
        'success_count': 'float',
        'allsuccessful': 'bool',
        'request_count': 'float',
        'failures': 'list[JobExecutionDeleteFailures]'
    }

    attribute_map = {
        'failed_count': 'failedCount',
        'success_count': 'successCount',
        'allsuccessful': 'allsuccessful',
        'request_count': 'requestCount',
        'failures': 'failures'
    }

    def __init__(self, failed_count=None, success_count=None, allsuccessful=None, request_count=None, failures=None, local_vars_configuration=None):  # noqa: E501
        """JobExecutionDelete - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._failed_count = None
        self._success_count = None
        self._allsuccessful = None
        self._request_count = None
        self._failures = None
        self.discriminator = None

        if failed_count is not None:
            self.failed_count = failed_count
        if success_count is not None:
            self.success_count = success_count
        if allsuccessful is not None:
            self.allsuccessful = allsuccessful
        if request_count is not None:
            self.request_count = request_count
        if failures is not None:
            self.failures = failures

    @property
    def failed_count(self):
        """Gets the failed_count of this JobExecutionDelete.  # noqa: E501


        :return: The failed_count of this JobExecutionDelete.  # noqa: E501
        :rtype: float
        """
        return self._failed_count

    @failed_count.setter
    def failed_count(self, failed_count):
        """Sets the failed_count of this JobExecutionDelete.


        :param failed_count: The failed_count of this JobExecutionDelete.  # noqa: E501
        :type failed_count: float
        """

        self._failed_count = failed_count

    @property
    def success_count(self):
        """Gets the success_count of this JobExecutionDelete.  # noqa: E501


        :return: The success_count of this JobExecutionDelete.  # noqa: E501
        :rtype: float
        """
        return self._success_count

    @success_count.setter
    def success_count(self, success_count):
        """Sets the success_count of this JobExecutionDelete.


        :param success_count: The success_count of this JobExecutionDelete.  # noqa: E501
        :type success_count: float
        """

        self._success_count = success_count

    @property
    def allsuccessful(self):
        """Gets the allsuccessful of this JobExecutionDelete.  # noqa: E501


        :return: The allsuccessful of this JobExecutionDelete.  # noqa: E501
        :rtype: bool
        """
        return self._allsuccessful

    @allsuccessful.setter
    def allsuccessful(self, allsuccessful):
        """Sets the allsuccessful of this JobExecutionDelete.


        :param allsuccessful: The allsuccessful of this JobExecutionDelete.  # noqa: E501
        :type allsuccessful: bool
        """

        self._allsuccessful = allsuccessful

    @property
    def request_count(self):
        """Gets the request_count of this JobExecutionDelete.  # noqa: E501


        :return: The request_count of this JobExecutionDelete.  # noqa: E501
        :rtype: float
        """
        return self._request_count

    @request_count.setter
    def request_count(self, request_count):
        """Sets the request_count of this JobExecutionDelete.


        :param request_count: The request_count of this JobExecutionDelete.  # noqa: E501
        :type request_count: float
        """

        self._request_count = request_count

    @property
    def failures(self):
        """Gets the failures of this JobExecutionDelete.  # noqa: E501


        :return: The failures of this JobExecutionDelete.  # noqa: E501
        :rtype: list[JobExecutionDeleteFailures]
        """
        return self._failures

    @failures.setter
    def failures(self, failures):
        """Sets the failures of this JobExecutionDelete.


        :param failures: The failures of this JobExecutionDelete.  # noqa: E501
        :type failures: list[JobExecutionDeleteFailures]
        """

        self._failures = failures

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, JobExecutionDelete):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, JobExecutionDelete):
            return True

        return self.to_dict() != other.to_dict()
