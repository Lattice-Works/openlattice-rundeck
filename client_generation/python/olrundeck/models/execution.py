# coding: utf-8

"""
    Rundeck

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from olrundeck.configuration import Configuration


class Execution(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'float',
        'href': 'str',
        'permalink': 'str',
        'status': 'str',
        'custom_status': 'str',
        'project': 'str',
        'user': 'str',
        'server_uuid': 'str',
        'date_started': 'object',
        'job': 'JobMetadata',
        'description': 'str',
        'argstring': 'str',
        'successful_nodes': 'list[str]'
    }

    attribute_map = {
        'id': 'id',
        'href': 'href',
        'permalink': 'permalink',
        'status': 'status',
        'custom_status': 'customStatus',
        'project': 'project',
        'user': 'user',
        'server_uuid': 'serverUUID',
        'date_started': 'date-started',
        'job': 'job',
        'description': 'description',
        'argstring': 'argstring',
        'successful_nodes': 'successfulNodes'
    }

    def __init__(self, id=None, href=None, permalink=None, status=None, custom_status=None, project=None, user=None, server_uuid=None, date_started=None, job=None, description=None, argstring=None, successful_nodes=None, local_vars_configuration=None):  # noqa: E501
        """Execution - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._href = None
        self._permalink = None
        self._status = None
        self._custom_status = None
        self._project = None
        self._user = None
        self._server_uuid = None
        self._date_started = None
        self._job = None
        self._description = None
        self._argstring = None
        self._successful_nodes = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if href is not None:
            self.href = href
        if permalink is not None:
            self.permalink = permalink
        if status is not None:
            self.status = status
        if custom_status is not None:
            self.custom_status = custom_status
        if project is not None:
            self.project = project
        if user is not None:
            self.user = user
        if server_uuid is not None:
            self.server_uuid = server_uuid
        if date_started is not None:
            self.date_started = date_started
        if job is not None:
            self.job = job
        if description is not None:
            self.description = description
        if argstring is not None:
            self.argstring = argstring
        if successful_nodes is not None:
            self.successful_nodes = successful_nodes

    @property
    def id(self):
        """Gets the id of this Execution.  # noqa: E501


        :return: The id of this Execution.  # noqa: E501
        :rtype: float
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Execution.


        :param id: The id of this Execution.  # noqa: E501
        :type id: float
        """

        self._id = id

    @property
    def href(self):
        """Gets the href of this Execution.  # noqa: E501


        :return: The href of this Execution.  # noqa: E501
        :rtype: str
        """
        return self._href

    @href.setter
    def href(self, href):
        """Sets the href of this Execution.


        :param href: The href of this Execution.  # noqa: E501
        :type href: str
        """

        self._href = href

    @property
    def permalink(self):
        """Gets the permalink of this Execution.  # noqa: E501


        :return: The permalink of this Execution.  # noqa: E501
        :rtype: str
        """
        return self._permalink

    @permalink.setter
    def permalink(self, permalink):
        """Sets the permalink of this Execution.


        :param permalink: The permalink of this Execution.  # noqa: E501
        :type permalink: str
        """

        self._permalink = permalink

    @property
    def status(self):
        """Gets the status of this Execution.  # noqa: E501


        :return: The status of this Execution.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Execution.


        :param status: The status of this Execution.  # noqa: E501
        :type status: str
        """
        allowed_values = ["running", "succeeded", "failed", "aborted", "timedout", "failed-with-retry", "scheduled", "other"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and status not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"  # noqa: E501
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def custom_status(self):
        """Gets the custom_status of this Execution.  # noqa: E501


        :return: The custom_status of this Execution.  # noqa: E501
        :rtype: str
        """
        return self._custom_status

    @custom_status.setter
    def custom_status(self, custom_status):
        """Sets the custom_status of this Execution.


        :param custom_status: The custom_status of this Execution.  # noqa: E501
        :type custom_status: str
        """

        self._custom_status = custom_status

    @property
    def project(self):
        """Gets the project of this Execution.  # noqa: E501


        :return: The project of this Execution.  # noqa: E501
        :rtype: str
        """
        return self._project

    @project.setter
    def project(self, project):
        """Sets the project of this Execution.


        :param project: The project of this Execution.  # noqa: E501
        :type project: str
        """

        self._project = project

    @property
    def user(self):
        """Gets the user of this Execution.  # noqa: E501


        :return: The user of this Execution.  # noqa: E501
        :rtype: str
        """
        return self._user

    @user.setter
    def user(self, user):
        """Sets the user of this Execution.


        :param user: The user of this Execution.  # noqa: E501
        :type user: str
        """

        self._user = user

    @property
    def server_uuid(self):
        """Gets the server_uuid of this Execution.  # noqa: E501


        :return: The server_uuid of this Execution.  # noqa: E501
        :rtype: str
        """
        return self._server_uuid

    @server_uuid.setter
    def server_uuid(self, server_uuid):
        """Sets the server_uuid of this Execution.


        :param server_uuid: The server_uuid of this Execution.  # noqa: E501
        :type server_uuid: str
        """

        self._server_uuid = server_uuid

    @property
    def date_started(self):
        """Gets the date_started of this Execution.  # noqa: E501


        :return: The date_started of this Execution.  # noqa: E501
        :rtype: object
        """
        return self._date_started

    @date_started.setter
    def date_started(self, date_started):
        """Sets the date_started of this Execution.


        :param date_started: The date_started of this Execution.  # noqa: E501
        :type date_started: object
        """

        self._date_started = date_started

    @property
    def job(self):
        """Gets the job of this Execution.  # noqa: E501


        :return: The job of this Execution.  # noqa: E501
        :rtype: JobMetadata
        """
        return self._job

    @job.setter
    def job(self, job):
        """Sets the job of this Execution.


        :param job: The job of this Execution.  # noqa: E501
        :type job: JobMetadata
        """

        self._job = job

    @property
    def description(self):
        """Gets the description of this Execution.  # noqa: E501


        :return: The description of this Execution.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Execution.


        :param description: The description of this Execution.  # noqa: E501
        :type description: str
        """

        self._description = description

    @property
    def argstring(self):
        """Gets the argstring of this Execution.  # noqa: E501


        :return: The argstring of this Execution.  # noqa: E501
        :rtype: str
        """
        return self._argstring

    @argstring.setter
    def argstring(self, argstring):
        """Sets the argstring of this Execution.


        :param argstring: The argstring of this Execution.  # noqa: E501
        :type argstring: str
        """

        self._argstring = argstring

    @property
    def successful_nodes(self):
        """Gets the successful_nodes of this Execution.  # noqa: E501


        :return: The successful_nodes of this Execution.  # noqa: E501
        :rtype: list[str]
        """
        return self._successful_nodes

    @successful_nodes.setter
    def successful_nodes(self, successful_nodes):
        """Sets the successful_nodes of this Execution.


        :param successful_nodes: The successful_nodes of this Execution.  # noqa: E501
        :type successful_nodes: list[str]
        """

        self._successful_nodes = successful_nodes

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Execution):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Execution):
            return True

        return self.to_dict() != other.to_dict()
