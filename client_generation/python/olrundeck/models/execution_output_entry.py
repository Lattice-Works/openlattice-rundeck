# coding: utf-8

"""
    Rundeck

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from olrundeck.configuration import Configuration


class ExecutionOutputEntry(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'time': 'str',
        'absolute_time': 'str',
        'log': 'str',
        'level': 'str',
        'stepctx': 'str',
        'node': 'str'
    }

    attribute_map = {
        'time': 'time',
        'absolute_time': 'absolute_time',
        'log': 'log',
        'level': 'level',
        'stepctx': 'stepctx',
        'node': 'node'
    }

    def __init__(self, time=None, absolute_time=None, log=None, level=None, stepctx=None, node=None, local_vars_configuration=None):  # noqa: E501
        """ExecutionOutputEntry - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._time = None
        self._absolute_time = None
        self._log = None
        self._level = None
        self._stepctx = None
        self._node = None
        self.discriminator = None

        if time is not None:
            self.time = time
        if absolute_time is not None:
            self.absolute_time = absolute_time
        if log is not None:
            self.log = log
        if level is not None:
            self.level = level
        if stepctx is not None:
            self.stepctx = stepctx
        if node is not None:
            self.node = node

    @property
    def time(self):
        """Gets the time of this ExecutionOutputEntry.  # noqa: E501


        :return: The time of this ExecutionOutputEntry.  # noqa: E501
        :rtype: str
        """
        return self._time

    @time.setter
    def time(self, time):
        """Sets the time of this ExecutionOutputEntry.


        :param time: The time of this ExecutionOutputEntry.  # noqa: E501
        :type time: str
        """

        self._time = time

    @property
    def absolute_time(self):
        """Gets the absolute_time of this ExecutionOutputEntry.  # noqa: E501


        :return: The absolute_time of this ExecutionOutputEntry.  # noqa: E501
        :rtype: str
        """
        return self._absolute_time

    @absolute_time.setter
    def absolute_time(self, absolute_time):
        """Sets the absolute_time of this ExecutionOutputEntry.


        :param absolute_time: The absolute_time of this ExecutionOutputEntry.  # noqa: E501
        :type absolute_time: str
        """

        self._absolute_time = absolute_time

    @property
    def log(self):
        """Gets the log of this ExecutionOutputEntry.  # noqa: E501


        :return: The log of this ExecutionOutputEntry.  # noqa: E501
        :rtype: str
        """
        return self._log

    @log.setter
    def log(self, log):
        """Sets the log of this ExecutionOutputEntry.


        :param log: The log of this ExecutionOutputEntry.  # noqa: E501
        :type log: str
        """

        self._log = log

    @property
    def level(self):
        """Gets the level of this ExecutionOutputEntry.  # noqa: E501


        :return: The level of this ExecutionOutputEntry.  # noqa: E501
        :rtype: str
        """
        return self._level

    @level.setter
    def level(self, level):
        """Sets the level of this ExecutionOutputEntry.


        :param level: The level of this ExecutionOutputEntry.  # noqa: E501
        :type level: str
        """

        self._level = level

    @property
    def stepctx(self):
        """Gets the stepctx of this ExecutionOutputEntry.  # noqa: E501


        :return: The stepctx of this ExecutionOutputEntry.  # noqa: E501
        :rtype: str
        """
        return self._stepctx

    @stepctx.setter
    def stepctx(self, stepctx):
        """Sets the stepctx of this ExecutionOutputEntry.


        :param stepctx: The stepctx of this ExecutionOutputEntry.  # noqa: E501
        :type stepctx: str
        """

        self._stepctx = stepctx

    @property
    def node(self):
        """Gets the node of this ExecutionOutputEntry.  # noqa: E501


        :return: The node of this ExecutionOutputEntry.  # noqa: E501
        :rtype: str
        """
        return self._node

    @node.setter
    def node(self, node):
        """Sets the node of this ExecutionOutputEntry.


        :param node: The node of this ExecutionOutputEntry.  # noqa: E501
        :type node: str
        """

        self._node = node

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ExecutionOutputEntry):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ExecutionOutputEntry):
            return True

        return self.to_dict() != other.to_dict()
