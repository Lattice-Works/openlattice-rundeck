# coding: utf-8

"""
    Rundeck

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openlattice-rundeck.configuration import Configuration


class ExecutionOutput(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'str',
        'offset': 'str',
        'completed': 'bool',
        'exec_completed': 'bool',
        'has_failed_nodes': 'bool',
        'exec_state': 'str',
        'last_modified': 'str',
        'exec_duration': 'float',
        'percent_loaded': 'float',
        'total_size': 'float',
        'retry_backoff': 'float',
        'cluster_exec': 'bool',
        'compacted': 'bool',
        'entries': 'list[ExecutionOutputEntry]'
    }

    attribute_map = {
        'id': 'id',
        'offset': 'offset',
        'completed': 'completed',
        'exec_completed': 'execCompleted',
        'has_failed_nodes': 'hasFailedNodes',
        'exec_state': 'execState',
        'last_modified': 'lastModified',
        'exec_duration': 'execDuration',
        'percent_loaded': 'percentLoaded',
        'total_size': 'totalSize',
        'retry_backoff': 'retryBackoff',
        'cluster_exec': 'clusterExec',
        'compacted': 'compacted',
        'entries': 'entries'
    }

    def __init__(self, id=None, offset=None, completed=None, exec_completed=None, has_failed_nodes=None, exec_state=None, last_modified=None, exec_duration=None, percent_loaded=None, total_size=None, retry_backoff=None, cluster_exec=None, compacted=None, entries=None, local_vars_configuration=None):  # noqa: E501
        """ExecutionOutput - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._offset = None
        self._completed = None
        self._exec_completed = None
        self._has_failed_nodes = None
        self._exec_state = None
        self._last_modified = None
        self._exec_duration = None
        self._percent_loaded = None
        self._total_size = None
        self._retry_backoff = None
        self._cluster_exec = None
        self._compacted = None
        self._entries = None
        self.discriminator = None

        self.id = id
        self.offset = offset
        self.completed = completed
        self.exec_completed = exec_completed
        self.has_failed_nodes = has_failed_nodes
        self.exec_state = exec_state
        self.last_modified = last_modified
        self.exec_duration = exec_duration
        self.percent_loaded = percent_loaded
        self.total_size = total_size
        self.retry_backoff = retry_backoff
        self.cluster_exec = cluster_exec
        self.compacted = compacted
        self.entries = entries

    @property
    def id(self):
        """Gets the id of this ExecutionOutput.  # noqa: E501


        :return: The id of this ExecutionOutput.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ExecutionOutput.


        :param id: The id of this ExecutionOutput.  # noqa: E501
        :type id: str
        """
        if self.local_vars_configuration.client_side_validation and id is None:  # noqa: E501
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def offset(self):
        """Gets the offset of this ExecutionOutput.  # noqa: E501


        :return: The offset of this ExecutionOutput.  # noqa: E501
        :rtype: str
        """
        return self._offset

    @offset.setter
    def offset(self, offset):
        """Sets the offset of this ExecutionOutput.


        :param offset: The offset of this ExecutionOutput.  # noqa: E501
        :type offset: str
        """
        if self.local_vars_configuration.client_side_validation and offset is None:  # noqa: E501
            raise ValueError("Invalid value for `offset`, must not be `None`")  # noqa: E501

        self._offset = offset

    @property
    def completed(self):
        """Gets the completed of this ExecutionOutput.  # noqa: E501


        :return: The completed of this ExecutionOutput.  # noqa: E501
        :rtype: bool
        """
        return self._completed

    @completed.setter
    def completed(self, completed):
        """Sets the completed of this ExecutionOutput.


        :param completed: The completed of this ExecutionOutput.  # noqa: E501
        :type completed: bool
        """
        if self.local_vars_configuration.client_side_validation and completed is None:  # noqa: E501
            raise ValueError("Invalid value for `completed`, must not be `None`")  # noqa: E501

        self._completed = completed

    @property
    def exec_completed(self):
        """Gets the exec_completed of this ExecutionOutput.  # noqa: E501


        :return: The exec_completed of this ExecutionOutput.  # noqa: E501
        :rtype: bool
        """
        return self._exec_completed

    @exec_completed.setter
    def exec_completed(self, exec_completed):
        """Sets the exec_completed of this ExecutionOutput.


        :param exec_completed: The exec_completed of this ExecutionOutput.  # noqa: E501
        :type exec_completed: bool
        """
        if self.local_vars_configuration.client_side_validation and exec_completed is None:  # noqa: E501
            raise ValueError("Invalid value for `exec_completed`, must not be `None`")  # noqa: E501

        self._exec_completed = exec_completed

    @property
    def has_failed_nodes(self):
        """Gets the has_failed_nodes of this ExecutionOutput.  # noqa: E501


        :return: The has_failed_nodes of this ExecutionOutput.  # noqa: E501
        :rtype: bool
        """
        return self._has_failed_nodes

    @has_failed_nodes.setter
    def has_failed_nodes(self, has_failed_nodes):
        """Sets the has_failed_nodes of this ExecutionOutput.


        :param has_failed_nodes: The has_failed_nodes of this ExecutionOutput.  # noqa: E501
        :type has_failed_nodes: bool
        """
        if self.local_vars_configuration.client_side_validation and has_failed_nodes is None:  # noqa: E501
            raise ValueError("Invalid value for `has_failed_nodes`, must not be `None`")  # noqa: E501

        self._has_failed_nodes = has_failed_nodes

    @property
    def exec_state(self):
        """Gets the exec_state of this ExecutionOutput.  # noqa: E501


        :return: The exec_state of this ExecutionOutput.  # noqa: E501
        :rtype: str
        """
        return self._exec_state

    @exec_state.setter
    def exec_state(self, exec_state):
        """Sets the exec_state of this ExecutionOutput.


        :param exec_state: The exec_state of this ExecutionOutput.  # noqa: E501
        :type exec_state: str
        """
        if self.local_vars_configuration.client_side_validation and exec_state is None:  # noqa: E501
            raise ValueError("Invalid value for `exec_state`, must not be `None`")  # noqa: E501

        self._exec_state = exec_state

    @property
    def last_modified(self):
        """Gets the last_modified of this ExecutionOutput.  # noqa: E501


        :return: The last_modified of this ExecutionOutput.  # noqa: E501
        :rtype: str
        """
        return self._last_modified

    @last_modified.setter
    def last_modified(self, last_modified):
        """Sets the last_modified of this ExecutionOutput.


        :param last_modified: The last_modified of this ExecutionOutput.  # noqa: E501
        :type last_modified: str
        """
        if self.local_vars_configuration.client_side_validation and last_modified is None:  # noqa: E501
            raise ValueError("Invalid value for `last_modified`, must not be `None`")  # noqa: E501

        self._last_modified = last_modified

    @property
    def exec_duration(self):
        """Gets the exec_duration of this ExecutionOutput.  # noqa: E501


        :return: The exec_duration of this ExecutionOutput.  # noqa: E501
        :rtype: float
        """
        return self._exec_duration

    @exec_duration.setter
    def exec_duration(self, exec_duration):
        """Sets the exec_duration of this ExecutionOutput.


        :param exec_duration: The exec_duration of this ExecutionOutput.  # noqa: E501
        :type exec_duration: float
        """
        if self.local_vars_configuration.client_side_validation and exec_duration is None:  # noqa: E501
            raise ValueError("Invalid value for `exec_duration`, must not be `None`")  # noqa: E501

        self._exec_duration = exec_duration

    @property
    def percent_loaded(self):
        """Gets the percent_loaded of this ExecutionOutput.  # noqa: E501


        :return: The percent_loaded of this ExecutionOutput.  # noqa: E501
        :rtype: float
        """
        return self._percent_loaded

    @percent_loaded.setter
    def percent_loaded(self, percent_loaded):
        """Sets the percent_loaded of this ExecutionOutput.


        :param percent_loaded: The percent_loaded of this ExecutionOutput.  # noqa: E501
        :type percent_loaded: float
        """
        if self.local_vars_configuration.client_side_validation and percent_loaded is None:  # noqa: E501
            raise ValueError("Invalid value for `percent_loaded`, must not be `None`")  # noqa: E501

        self._percent_loaded = percent_loaded

    @property
    def total_size(self):
        """Gets the total_size of this ExecutionOutput.  # noqa: E501


        :return: The total_size of this ExecutionOutput.  # noqa: E501
        :rtype: float
        """
        return self._total_size

    @total_size.setter
    def total_size(self, total_size):
        """Sets the total_size of this ExecutionOutput.


        :param total_size: The total_size of this ExecutionOutput.  # noqa: E501
        :type total_size: float
        """
        if self.local_vars_configuration.client_side_validation and total_size is None:  # noqa: E501
            raise ValueError("Invalid value for `total_size`, must not be `None`")  # noqa: E501

        self._total_size = total_size

    @property
    def retry_backoff(self):
        """Gets the retry_backoff of this ExecutionOutput.  # noqa: E501


        :return: The retry_backoff of this ExecutionOutput.  # noqa: E501
        :rtype: float
        """
        return self._retry_backoff

    @retry_backoff.setter
    def retry_backoff(self, retry_backoff):
        """Sets the retry_backoff of this ExecutionOutput.


        :param retry_backoff: The retry_backoff of this ExecutionOutput.  # noqa: E501
        :type retry_backoff: float
        """
        if self.local_vars_configuration.client_side_validation and retry_backoff is None:  # noqa: E501
            raise ValueError("Invalid value for `retry_backoff`, must not be `None`")  # noqa: E501

        self._retry_backoff = retry_backoff

    @property
    def cluster_exec(self):
        """Gets the cluster_exec of this ExecutionOutput.  # noqa: E501


        :return: The cluster_exec of this ExecutionOutput.  # noqa: E501
        :rtype: bool
        """
        return self._cluster_exec

    @cluster_exec.setter
    def cluster_exec(self, cluster_exec):
        """Sets the cluster_exec of this ExecutionOutput.


        :param cluster_exec: The cluster_exec of this ExecutionOutput.  # noqa: E501
        :type cluster_exec: bool
        """
        if self.local_vars_configuration.client_side_validation and cluster_exec is None:  # noqa: E501
            raise ValueError("Invalid value for `cluster_exec`, must not be `None`")  # noqa: E501

        self._cluster_exec = cluster_exec

    @property
    def compacted(self):
        """Gets the compacted of this ExecutionOutput.  # noqa: E501


        :return: The compacted of this ExecutionOutput.  # noqa: E501
        :rtype: bool
        """
        return self._compacted

    @compacted.setter
    def compacted(self, compacted):
        """Sets the compacted of this ExecutionOutput.


        :param compacted: The compacted of this ExecutionOutput.  # noqa: E501
        :type compacted: bool
        """
        if self.local_vars_configuration.client_side_validation and compacted is None:  # noqa: E501
            raise ValueError("Invalid value for `compacted`, must not be `None`")  # noqa: E501

        self._compacted = compacted

    @property
    def entries(self):
        """Gets the entries of this ExecutionOutput.  # noqa: E501


        :return: The entries of this ExecutionOutput.  # noqa: E501
        :rtype: list[ExecutionOutputEntry]
        """
        return self._entries

    @entries.setter
    def entries(self, entries):
        """Sets the entries of this ExecutionOutput.


        :param entries: The entries of this ExecutionOutput.  # noqa: E501
        :type entries: list[ExecutionOutputEntry]
        """
        if self.local_vars_configuration.client_side_validation and entries is None:  # noqa: E501
            raise ValueError("Invalid value for `entries`, must not be `None`")  # noqa: E501

        self._entries = entries

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ExecutionOutput):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ExecutionOutput):
            return True

        return self.to_dict() != other.to_dict()
